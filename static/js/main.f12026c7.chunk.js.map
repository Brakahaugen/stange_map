{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js","components/norkart.jpg"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","position","MapboxGLMap","useState","map","setMap","mapContainer","useRef","useEffect","geojson","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","resize","features","forEach","marker","el","document","createElement","className","backgroundImage","BannerBgImg1","properties","iconSize","addEventListener","flyTo","essential","Marker","setLngLat","geometry","coordinates","addTo","addMarkers","initializeMap","ref","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"uLAEMA,G,MAAS,CACXC,OAAQ,OACRC,MAAO,QACPC,QAAS,OACTC,UAAW,SACXC,SAAU,SAWCC,EARA,WACX,OACI,yBAAKC,MAAOP,GACR,kE,+CCPNA,EAAS,CACbE,MAAO,OACPD,OAAQ,qBACRO,SAAU,YAoFGC,EAjDK,WAAO,IAAD,EACFC,mBAAS,MADP,mBACjBC,EADiB,KACZC,EADY,KAElBC,EAAeC,iBAAO,MA4C5B,OAvCAC,qBAAU,WACR,IAAIC,EAAU,CACZ,KAAQ,oBACR,SAAY,CACV,CACA,KAAQ,UACR,WAAc,CACZ,QAAW,MACX,SAAY,CAAC,GAAI,KAEnB,SAAY,CACV,KAAQ,QACR,YAAe,CAAC,WAAY,gBAKlCC,IAASC,YAAcC,yFAiBlBR,GAhBiB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACzBF,EAAM,IAAIM,IAASG,IAAI,CAC3BC,UAAWR,EAAaS,QACxBf,MAAO,qCACPgB,OAAQ,CAAC,UAAU,WACnBC,KAAM,KAGRb,EAAIc,GAAG,QAAQ,WACbb,EAAOD,GACPA,EAAIe,SAnEO,SAACV,EAASL,GAC3BK,EAAQW,SAASC,SAAQ,SAAUC,GAEjC,IAAIC,EAAKC,SAASC,cAAc,OAChCF,EAAGG,UAAY,SACfH,EAAGvB,MAAM2B,gBAAT,cAAkCC,IAAlC,KAOAL,EAAGvB,MAAML,MAAQ2B,EAAOO,WAAWC,SAAS,GAAK,KACjDP,EAAGvB,MAAMN,OAAS4B,EAAOO,WAAWC,SAAS,GAAK,KAElDP,EAAGQ,iBAAiB,SAAS,WAC3B3B,EAAI4B,MAAM,CACRhB,OAAO,CAAC,WAAY,YACpBC,KAAM,KACNgB,WAAW,OAOf,IAAIvB,IAASwB,OAAOX,GACnBY,UAAUb,EAAOc,SAASC,aAC1BC,MAAMlC,MAyCHmC,CAAW9B,EAASL,MAIdoC,CAAc,CAAEnC,SAAQC,mBACjC,CAACF,IAIG,yBAAKqC,IAAK,SAAAlB,GAAE,OAAKjB,EAAaS,QAAUQ,GAAKvB,MAAOP,KCtFvDA,EAAS,CACbiD,SAAS,UAYIC,MATf,WACE,OACE,yBAAK3C,MAAOP,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.f12026c7.chunk.js","sourcesContent":["import React from 'react'\n\nconst styles = {\n    height: '60px',\n    width: '100vw',\n    padding: '10px',\n    textAlign: 'center',\n    fontSize: '30px',\n  };\n\nconst Header = () => {\n    return (\n        <div style={styles}>\n            <header>KARTET TIL ESPEN OG FREDRIK!</header>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport BannerBgImg1 from \"./norkart.jpg\";\n\n\nconst styles = {\n  width: \"100%\",\n  height: \"calc(100vh - 80px)\",\n  position: \"absolute\"\n};\n\nconst addMarkers = (geojson, map) => {\n  geojson.features.forEach(function (marker) {\n    // create a DOM element for the marker\n    var el = document.createElement('div');\n    el.className = 'marker';\n    el.style.backgroundImage = `url(${BannerBgImg1})`\n    // \"require('norkart.jpg');\"\n    // marker.properties.iconSize.join('/') +\n    // '/)';\n\n    //  <img src=\"norkart.jpg\" alt=\"IMAGE\"></img>\n    // url(\"norkart.jpg\");\n    el.style.width = marker.properties.iconSize[0] + 'px';\n    el.style.height = marker.properties.iconSize[1] + 'px';\n     \n    el.addEventListener('click', function () {\n      map.flyTo({\n        center:[10.4032433, 63.4408788],\n        zoom: 22.5,  // 22.5 is greater than the default maxZoom of 20\n        essential: true // this animation is considered essential with respect to prefers-reduced-motion\n        });\n\n        \n    });\n     \n    // add marker to map\n    new mapboxgl.Marker(el)\n    .setLngLat(marker.geometry.coordinates)\n    .addTo(map);\n    });\n}\n\nconst MapboxGLMap = () => {\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n\n\n\n  useEffect(() => {\n    var geojson = {\n      'type': 'FeatureCollection',\n      'features': [\n        {\n        'type': 'Feature',\n        'properties': {\n          'message': 'Foo',\n          'iconSize': [34, 50]\n        },\n        'geometry': {\n          'type': 'Point',\n          'coordinates': [10.4032433, 63.4408788]\n        }\n      }\n    ]};\n\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n    const initializeMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n        center: [10.408773,63.422091],\n        zoom: 10\n      });\n\n      map.on(\"load\", () => {\n        setMap(map);\n        map.resize();\n        \n        addMarkers(geojson, map);\n      });\n    };\n\n    if (!map) initializeMap({ setMap, mapContainer });\n  }, [map]);\n\n  \n\n  return <div ref={el => (mapContainer.current = el)} style={styles} />;\n};\n\nexport default MapboxGLMap;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MapboxGLMap from \"./components/MapboxGLMap\";\n\nconst styles = {\n  overflow:'hidden'\n}\n\nfunction App() {\n  return (\n    <div style={styles}>\n      <Header/>\n      <MapboxGLMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/norkart.52272777.jpg\";"],"sourceRoot":""}